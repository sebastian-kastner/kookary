/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IngredientCategory } from '../models';
// @ts-ignore
import { IngredientCategoryJsonld } from '../models';
// @ts-ignore
import { InlineResponse2001 } from '../models';
/**
 * IngredientCategoryApi - axios parameter creator
 * @export
 */
export const IngredientCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the IngredientCategory resource.
         * @summary Removes the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientCategoryItem: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deleteIngredientCategoryItem', 'categoryId', categoryId)
            const localVarPath = `/api/ingredient_categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of IngredientCategory resources.
         * @summary Retrieves the collection of IngredientCategory resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCategoryCollection: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ingredient_categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a IngredientCategory resource.
         * @summary Retrieves a IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCategoryItem: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getIngredientCategoryItem', 'categoryId', categoryId)
            const localVarPath = `/api/ingredient_categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the IngredientCategory resource.
         * @summary Updates the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {IngredientCategory} ingredientCategory The updated IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIngredientCategoryItem: async (categoryId: string, ingredientCategory: IngredientCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('patchIngredientCategoryItem', 'categoryId', categoryId)
            // verify required parameter 'ingredientCategory' is not null or undefined
            assertParamExists('patchIngredientCategoryItem', 'ingredientCategory', ingredientCategory)
            const localVarPath = `/api/ingredient_categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a IngredientCategory resource.
         * @summary Creates a IngredientCategory resource.
         * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The new IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientCategoryCollection: async (ingredientCategoryJsonld: IngredientCategoryJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientCategoryJsonld' is not null or undefined
            assertParamExists('postIngredientCategoryCollection', 'ingredientCategoryJsonld', ingredientCategoryJsonld)
            const localVarPath = `/api/ingredient_categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientCategoryJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the IngredientCategory resource.
         * @summary Replaces the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The updated IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientCategoryItem: async (categoryId: string, ingredientCategoryJsonld: IngredientCategoryJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('putIngredientCategoryItem', 'categoryId', categoryId)
            // verify required parameter 'ingredientCategoryJsonld' is not null or undefined
            assertParamExists('putIngredientCategoryItem', 'ingredientCategoryJsonld', ingredientCategoryJsonld)
            const localVarPath = `/api/ingredient_categories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientCategoryJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientCategoryApi - functional programming interface
 * @export
 */
export const IngredientCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngredientCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the IngredientCategory resource.
         * @summary Removes the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredientCategoryItem(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredientCategoryItem(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of IngredientCategory resources.
         * @summary Retrieves the collection of IngredientCategory resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientCategoryCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientCategoryCollection(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a IngredientCategory resource.
         * @summary Retrieves a IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientCategoryItem(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientCategoryJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientCategoryItem(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the IngredientCategory resource.
         * @summary Updates the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {IngredientCategory} ingredientCategory The updated IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIngredientCategoryItem(categoryId: string, ingredientCategory: IngredientCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientCategoryJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIngredientCategoryItem(categoryId, ingredientCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a IngredientCategory resource.
         * @summary Creates a IngredientCategory resource.
         * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The new IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIngredientCategoryCollection(ingredientCategoryJsonld: IngredientCategoryJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientCategoryJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIngredientCategoryCollection(ingredientCategoryJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the IngredientCategory resource.
         * @summary Replaces the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The updated IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIngredientCategoryItem(categoryId: string, ingredientCategoryJsonld: IngredientCategoryJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientCategoryJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIngredientCategoryItem(categoryId, ingredientCategoryJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IngredientCategoryApi - factory interface
 * @export
 */
export const IngredientCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngredientCategoryApiFp(configuration)
    return {
        /**
         * Removes the IngredientCategory resource.
         * @summary Removes the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientCategoryItem(categoryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredientCategoryItem(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of IngredientCategory resources.
         * @summary Retrieves the collection of IngredientCategory resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCategoryCollection(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getIngredientCategoryCollection(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a IngredientCategory resource.
         * @summary Retrieves a IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientCategoryItem(categoryId: string, options?: any): AxiosPromise<IngredientCategoryJsonld> {
            return localVarFp.getIngredientCategoryItem(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the IngredientCategory resource.
         * @summary Updates the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {IngredientCategory} ingredientCategory The updated IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIngredientCategoryItem(categoryId: string, ingredientCategory: IngredientCategory, options?: any): AxiosPromise<IngredientCategoryJsonld> {
            return localVarFp.patchIngredientCategoryItem(categoryId, ingredientCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a IngredientCategory resource.
         * @summary Creates a IngredientCategory resource.
         * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The new IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientCategoryCollection(ingredientCategoryJsonld: IngredientCategoryJsonld, options?: any): AxiosPromise<IngredientCategoryJsonld> {
            return localVarFp.postIngredientCategoryCollection(ingredientCategoryJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the IngredientCategory resource.
         * @summary Replaces the IngredientCategory resource.
         * @param {string} categoryId Resource identifier
         * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The updated IngredientCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientCategoryItem(categoryId: string, ingredientCategoryJsonld: IngredientCategoryJsonld, options?: any): AxiosPromise<IngredientCategoryJsonld> {
            return localVarFp.putIngredientCategoryItem(categoryId, ingredientCategoryJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientCategoryApi - object-oriented interface
 * @export
 * @class IngredientCategoryApi
 * @extends {BaseAPI}
 */
export class IngredientCategoryApi extends BaseAPI {
    /**
     * Removes the IngredientCategory resource.
     * @summary Removes the IngredientCategory resource.
     * @param {string} categoryId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientCategoryApi
     */
    public deleteIngredientCategoryItem(categoryId: string, options?: AxiosRequestConfig) {
        return IngredientCategoryApiFp(this.configuration).deleteIngredientCategoryItem(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of IngredientCategory resources.
     * @summary Retrieves the collection of IngredientCategory resources.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientCategoryApi
     */
    public getIngredientCategoryCollection(options?: AxiosRequestConfig) {
        return IngredientCategoryApiFp(this.configuration).getIngredientCategoryCollection(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a IngredientCategory resource.
     * @summary Retrieves a IngredientCategory resource.
     * @param {string} categoryId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientCategoryApi
     */
    public getIngredientCategoryItem(categoryId: string, options?: AxiosRequestConfig) {
        return IngredientCategoryApiFp(this.configuration).getIngredientCategoryItem(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the IngredientCategory resource.
     * @summary Updates the IngredientCategory resource.
     * @param {string} categoryId Resource identifier
     * @param {IngredientCategory} ingredientCategory The updated IngredientCategory resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientCategoryApi
     */
    public patchIngredientCategoryItem(categoryId: string, ingredientCategory: IngredientCategory, options?: AxiosRequestConfig) {
        return IngredientCategoryApiFp(this.configuration).patchIngredientCategoryItem(categoryId, ingredientCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a IngredientCategory resource.
     * @summary Creates a IngredientCategory resource.
     * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The new IngredientCategory resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientCategoryApi
     */
    public postIngredientCategoryCollection(ingredientCategoryJsonld: IngredientCategoryJsonld, options?: AxiosRequestConfig) {
        return IngredientCategoryApiFp(this.configuration).postIngredientCategoryCollection(ingredientCategoryJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the IngredientCategory resource.
     * @summary Replaces the IngredientCategory resource.
     * @param {string} categoryId Resource identifier
     * @param {IngredientCategoryJsonld} ingredientCategoryJsonld The updated IngredientCategory resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientCategoryApi
     */
    public putIngredientCategoryItem(categoryId: string, ingredientCategoryJsonld: IngredientCategoryJsonld, options?: AxiosRequestConfig) {
        return IngredientCategoryApiFp(this.configuration).putIngredientCategoryItem(categoryId, ingredientCategoryJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}
