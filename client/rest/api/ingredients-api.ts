/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Ingredients } from '../models';
// @ts-ignore
import { IngredientsJsonld } from '../models';
// @ts-ignore
import { InlineResponse200 } from '../models';
/**
 * IngredientsApi - axios parameter creator
 * @export
 */
export const IngredientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Ingredients resource.
         * @summary Removes the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsItem: async (ingredientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('deleteIngredientsItem', 'ingredientId', ingredientId)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Ingredients resources.
         * @summary Retrieves the collection of Ingredients resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ingredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Ingredients resource.
         * @summary Retrieves a Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsItem: async (ingredientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('getIngredientsItem', 'ingredientId', ingredientId)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Ingredients resource.
         * @summary Updates the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {Ingredients} ingredients The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIngredientsItem: async (ingredientId: string, ingredients: Ingredients, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('patchIngredientsItem', 'ingredientId', ingredientId)
            // verify required parameter 'ingredients' is not null or undefined
            assertParamExists('patchIngredientsItem', 'ingredients', ingredients)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredients, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Ingredients resource.
         * @summary Creates a Ingredients resource.
         * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientsCollection: async (ingredientsJsonld: IngredientsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientsJsonld' is not null or undefined
            assertParamExists('postIngredientsCollection', 'ingredientsJsonld', ingredientsJsonld)
            const localVarPath = `/api/ingredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Ingredients resource.
         * @summary Replaces the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientsItem: async (ingredientId: string, ingredientsJsonld: IngredientsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('putIngredientsItem', 'ingredientId', ingredientId)
            // verify required parameter 'ingredientsJsonld' is not null or undefined
            assertParamExists('putIngredientsItem', 'ingredientsJsonld', ingredientsJsonld)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientsApi - functional programming interface
 * @export
 */
export const IngredientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngredientsApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Ingredients resource.
         * @summary Removes the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredientsItem(ingredientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredientsItem(ingredientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Ingredients resources.
         * @summary Retrieves the collection of Ingredients resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Ingredients resource.
         * @summary Retrieves a Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsItem(ingredientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsItem(ingredientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Ingredients resource.
         * @summary Updates the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {Ingredients} ingredients The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIngredientsItem(ingredientId: string, ingredients: Ingredients, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIngredientsItem(ingredientId, ingredients, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Ingredients resource.
         * @summary Creates a Ingredients resource.
         * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIngredientsCollection(ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIngredientsCollection(ingredientsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Ingredients resource.
         * @summary Replaces the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIngredientsItem(ingredientId: string, ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIngredientsItem(ingredientId, ingredientsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IngredientsApi - factory interface
 * @export
 */
export const IngredientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngredientsApiFp(configuration)
    return {
        /**
         * Removes the Ingredients resource.
         * @summary Removes the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsItem(ingredientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredientsItem(ingredientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Ingredients resources.
         * @summary Retrieves the collection of Ingredients resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsCollection(page?: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getIngredientsCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Ingredients resource.
         * @summary Retrieves a Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsItem(ingredientId: string, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.getIngredientsItem(ingredientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Ingredients resource.
         * @summary Updates the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {Ingredients} ingredients The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIngredientsItem(ingredientId: string, ingredients: Ingredients, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.patchIngredientsItem(ingredientId, ingredients, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Ingredients resource.
         * @summary Creates a Ingredients resource.
         * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientsCollection(ingredientsJsonld: IngredientsJsonld, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.postIngredientsCollection(ingredientsJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Ingredients resource.
         * @summary Replaces the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientsItem(ingredientId: string, ingredientsJsonld: IngredientsJsonld, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.putIngredientsItem(ingredientId, ingredientsJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientsApi - object-oriented interface
 * @export
 * @class IngredientsApi
 * @extends {BaseAPI}
 */
export class IngredientsApi extends BaseAPI {
    /**
     * Removes the Ingredients resource.
     * @summary Removes the Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public deleteIngredientsItem(ingredientId: string, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).deleteIngredientsItem(ingredientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Ingredients resources.
     * @summary Retrieves the collection of Ingredients resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public getIngredientsCollection(page?: number, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).getIngredientsCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Ingredients resource.
     * @summary Retrieves a Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public getIngredientsItem(ingredientId: string, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).getIngredientsItem(ingredientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Ingredients resource.
     * @summary Updates the Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {Ingredients} ingredients The updated Ingredients resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public patchIngredientsItem(ingredientId: string, ingredients: Ingredients, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).patchIngredientsItem(ingredientId, ingredients, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Ingredients resource.
     * @summary Creates a Ingredients resource.
     * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public postIngredientsCollection(ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).postIngredientsCollection(ingredientsJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Ingredients resource.
     * @summary Replaces the Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public putIngredientsItem(ingredientId: string, ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).putIngredientsItem(ingredientId, ingredientsJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}
