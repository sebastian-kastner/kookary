/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { Tags } from '../models';
// @ts-ignore
import { TagsJsonld } from '../models';
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Tags resource.
         * @summary Removes the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsItem: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteTagsItem', 'tagId', tagId)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Tags resources.
         * @summary Retrieves the collection of Tags resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Tags resource.
         * @summary Retrieves a Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsItem: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getTagsItem', 'tagId', tagId)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Tags resource.
         * @summary Updates the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {Tags} tags The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTagsItem: async (tagId: string, tags: Tags, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('patchTagsItem', 'tagId', tagId)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('patchTagsItem', 'tags', tags)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tags, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Tags resource.
         * @summary Creates a Tags resource.
         * @param {TagsJsonld} tagsJsonld The new Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTagsCollection: async (tagsJsonld: TagsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagsJsonld' is not null or undefined
            assertParamExists('postTagsCollection', 'tagsJsonld', tagsJsonld)
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Tags resource.
         * @summary Replaces the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {TagsJsonld} tagsJsonld The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsItem: async (tagId: string, tagsJsonld: TagsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('putTagsItem', 'tagId', tagId)
            // verify required parameter 'tagsJsonld' is not null or undefined
            assertParamExists('putTagsItem', 'tagsJsonld', tagsJsonld)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Tags resource.
         * @summary Removes the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTagsItem(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTagsItem(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Tags resources.
         * @summary Retrieves the collection of Tags resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Tags resource.
         * @summary Retrieves a Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsItem(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsItem(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Tags resource.
         * @summary Updates the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {Tags} tags The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTagsItem(tagId: string, tags: Tags, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTagsItem(tagId, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Tags resource.
         * @summary Creates a Tags resource.
         * @param {TagsJsonld} tagsJsonld The new Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTagsCollection(tagsJsonld: TagsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTagsCollection(tagsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Tags resource.
         * @summary Replaces the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {TagsJsonld} tagsJsonld The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTagsItem(tagId: string, tagsJsonld: TagsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTagsItem(tagId, tagsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * Removes the Tags resource.
         * @summary Removes the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsItem(tagId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTagsItem(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Tags resources.
         * @summary Retrieves the collection of Tags resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsCollection(page?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getTagsCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Tags resource.
         * @summary Retrieves a Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsItem(tagId: string, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.getTagsItem(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Tags resource.
         * @summary Updates the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {Tags} tags The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTagsItem(tagId: string, tags: Tags, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.patchTagsItem(tagId, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Tags resource.
         * @summary Creates a Tags resource.
         * @param {TagsJsonld} tagsJsonld The new Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTagsCollection(tagsJsonld: TagsJsonld, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.postTagsCollection(tagsJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Tags resource.
         * @summary Replaces the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {TagsJsonld} tagsJsonld The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsItem(tagId: string, tagsJsonld: TagsJsonld, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.putTagsItem(tagId, tagsJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * Removes the Tags resource.
     * @summary Removes the Tags resource.
     * @param {string} tagId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTagsItem(tagId: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).deleteTagsItem(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Tags resources.
     * @summary Retrieves the collection of Tags resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTagsCollection(page?: number, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTagsCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Tags resource.
     * @summary Retrieves a Tags resource.
     * @param {string} tagId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTagsItem(tagId: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTagsItem(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Tags resource.
     * @summary Updates the Tags resource.
     * @param {string} tagId Resource identifier
     * @param {Tags} tags The updated Tags resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public patchTagsItem(tagId: string, tags: Tags, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).patchTagsItem(tagId, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Tags resource.
     * @summary Creates a Tags resource.
     * @param {TagsJsonld} tagsJsonld The new Tags resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public postTagsCollection(tagsJsonld: TagsJsonld, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).postTagsCollection(tagsJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Tags resource.
     * @summary Replaces the Tags resource.
     * @param {string} tagId Resource identifier
     * @param {TagsJsonld} tagsJsonld The updated Tags resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public putTagsItem(tagId: string, tagsJsonld: TagsJsonld, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).putTagsItem(tagId, tagsJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}
