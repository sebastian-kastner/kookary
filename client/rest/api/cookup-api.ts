/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Cookup } from '../models';
// @ts-ignore
import { CookupJsonld } from '../models';
// @ts-ignore
import { InlineResponse200 } from '../models';
/**
 * CookupApi - axios parameter creator
 * @export
 */
export const CookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Cookup resource.
         * @summary Removes the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCookupItem: async (cookupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookupId' is not null or undefined
            assertParamExists('deleteCookupItem', 'cookupId', cookupId)
            const localVarPath = `/api/cookups/{cookupId}`
                .replace(`{${"cookupId"}}`, encodeURIComponent(String(cookupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Cookup resources.
         * @summary Retrieves the collection of Cookup resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCookupCollection: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cookups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Cookup resource.
         * @summary Retrieves a Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCookupItem: async (cookupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookupId' is not null or undefined
            assertParamExists('getCookupItem', 'cookupId', cookupId)
            const localVarPath = `/api/cookups/{cookupId}`
                .replace(`{${"cookupId"}}`, encodeURIComponent(String(cookupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Cookup resource.
         * @summary Updates the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {Cookup} cookup The updated Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCookupItem: async (cookupId: string, cookup: Cookup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookupId' is not null or undefined
            assertParamExists('patchCookupItem', 'cookupId', cookupId)
            // verify required parameter 'cookup' is not null or undefined
            assertParamExists('patchCookupItem', 'cookup', cookup)
            const localVarPath = `/api/cookups/{cookupId}`
                .replace(`{${"cookupId"}}`, encodeURIComponent(String(cookupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cookup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Cookup resource.
         * @summary Creates a Cookup resource.
         * @param {CookupJsonld} cookupJsonld The new Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCookupCollection: async (cookupJsonld: CookupJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookupJsonld' is not null or undefined
            assertParamExists('postCookupCollection', 'cookupJsonld', cookupJsonld)
            const localVarPath = `/api/cookups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cookupJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Cookup resource.
         * @summary Replaces the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {CookupJsonld} cookupJsonld The updated Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCookupItem: async (cookupId: string, cookupJsonld: CookupJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookupId' is not null or undefined
            assertParamExists('putCookupItem', 'cookupId', cookupId)
            // verify required parameter 'cookupJsonld' is not null or undefined
            assertParamExists('putCookupItem', 'cookupJsonld', cookupJsonld)
            const localVarPath = `/api/cookups/{cookupId}`
                .replace(`{${"cookupId"}}`, encodeURIComponent(String(cookupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cookupJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CookupApi - functional programming interface
 * @export
 */
export const CookupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CookupApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Cookup resource.
         * @summary Removes the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCookupItem(cookupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCookupItem(cookupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Cookup resources.
         * @summary Retrieves the collection of Cookup resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCookupCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCookupCollection(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Cookup resource.
         * @summary Retrieves a Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCookupItem(cookupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CookupJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCookupItem(cookupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Cookup resource.
         * @summary Updates the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {Cookup} cookup The updated Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCookupItem(cookupId: string, cookup: Cookup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CookupJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCookupItem(cookupId, cookup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Cookup resource.
         * @summary Creates a Cookup resource.
         * @param {CookupJsonld} cookupJsonld The new Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCookupCollection(cookupJsonld: CookupJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CookupJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCookupCollection(cookupJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Cookup resource.
         * @summary Replaces the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {CookupJsonld} cookupJsonld The updated Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCookupItem(cookupId: string, cookupJsonld: CookupJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CookupJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCookupItem(cookupId, cookupJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CookupApi - factory interface
 * @export
 */
export const CookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CookupApiFp(configuration)
    return {
        /**
         * Removes the Cookup resource.
         * @summary Removes the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCookupItem(cookupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCookupItem(cookupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Cookup resources.
         * @summary Retrieves the collection of Cookup resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCookupCollection(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getCookupCollection(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Cookup resource.
         * @summary Retrieves a Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCookupItem(cookupId: string, options?: any): AxiosPromise<CookupJsonld> {
            return localVarFp.getCookupItem(cookupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Cookup resource.
         * @summary Updates the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {Cookup} cookup The updated Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCookupItem(cookupId: string, cookup: Cookup, options?: any): AxiosPromise<CookupJsonld> {
            return localVarFp.patchCookupItem(cookupId, cookup, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Cookup resource.
         * @summary Creates a Cookup resource.
         * @param {CookupJsonld} cookupJsonld The new Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCookupCollection(cookupJsonld: CookupJsonld, options?: any): AxiosPromise<CookupJsonld> {
            return localVarFp.postCookupCollection(cookupJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Cookup resource.
         * @summary Replaces the Cookup resource.
         * @param {string} cookupId Resource identifier
         * @param {CookupJsonld} cookupJsonld The updated Cookup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCookupItem(cookupId: string, cookupJsonld: CookupJsonld, options?: any): AxiosPromise<CookupJsonld> {
            return localVarFp.putCookupItem(cookupId, cookupJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CookupApi - object-oriented interface
 * @export
 * @class CookupApi
 * @extends {BaseAPI}
 */
export class CookupApi extends BaseAPI {
    /**
     * Removes the Cookup resource.
     * @summary Removes the Cookup resource.
     * @param {string} cookupId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookupApi
     */
    public deleteCookupItem(cookupId: string, options?: AxiosRequestConfig) {
        return CookupApiFp(this.configuration).deleteCookupItem(cookupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Cookup resources.
     * @summary Retrieves the collection of Cookup resources.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookupApi
     */
    public getCookupCollection(options?: AxiosRequestConfig) {
        return CookupApiFp(this.configuration).getCookupCollection(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Cookup resource.
     * @summary Retrieves a Cookup resource.
     * @param {string} cookupId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookupApi
     */
    public getCookupItem(cookupId: string, options?: AxiosRequestConfig) {
        return CookupApiFp(this.configuration).getCookupItem(cookupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Cookup resource.
     * @summary Updates the Cookup resource.
     * @param {string} cookupId Resource identifier
     * @param {Cookup} cookup The updated Cookup resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookupApi
     */
    public patchCookupItem(cookupId: string, cookup: Cookup, options?: AxiosRequestConfig) {
        return CookupApiFp(this.configuration).patchCookupItem(cookupId, cookup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Cookup resource.
     * @summary Creates a Cookup resource.
     * @param {CookupJsonld} cookupJsonld The new Cookup resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookupApi
     */
    public postCookupCollection(cookupJsonld: CookupJsonld, options?: AxiosRequestConfig) {
        return CookupApiFp(this.configuration).postCookupCollection(cookupJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Cookup resource.
     * @summary Replaces the Cookup resource.
     * @param {string} cookupId Resource identifier
     * @param {CookupJsonld} cookupJsonld The updated Cookup resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookupApi
     */
    public putCookupItem(cookupId: string, cookupJsonld: CookupJsonld, options?: AxiosRequestConfig) {
        return CookupApiFp(this.configuration).putCookupItem(cookupId, cookupJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}
