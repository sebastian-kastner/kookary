/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse2001 } from '../models';
// @ts-ignore
import { Recipes } from '../models';
// @ts-ignore
import { RecipesJsonld } from '../models';
/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Recipes resource.
         * @summary Removes the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipesItem: async (recipeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('deleteRecipesItem', 'recipeId', recipeId)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Recipes resources.
         * @summary Retrieves the collection of Recipes resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Recipes resource.
         * @summary Retrieves a Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesItem: async (recipeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('getRecipesItem', 'recipeId', recipeId)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Recipes resource.
         * @summary Updates the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {Recipes} recipes The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRecipesItem: async (recipeId: string, recipes: Recipes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('patchRecipesItem', 'recipeId', recipeId)
            // verify required parameter 'recipes' is not null or undefined
            assertParamExists('patchRecipesItem', 'recipes', recipes)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Recipes resource.
         * @summary Creates a Recipes resource.
         * @param {RecipesJsonld} recipesJsonld The new Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipesCollection: async (recipesJsonld: RecipesJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipesJsonld' is not null or undefined
            assertParamExists('postRecipesCollection', 'recipesJsonld', recipesJsonld)
            const localVarPath = `/api/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipesJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Recipes resource.
         * @summary Replaces the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesItem: async (recipeId: string, recipesJsonld: RecipesJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('putRecipesItem', 'recipeId', recipeId)
            // verify required parameter 'recipesJsonld' is not null or undefined
            assertParamExists('putRecipesItem', 'recipesJsonld', recipesJsonld)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipesJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Recipes resource.
         * @summary Removes the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipesItem(recipeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipesItem(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Recipes resources.
         * @summary Retrieves the collection of Recipes resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Recipes resource.
         * @summary Retrieves a Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesItem(recipeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesItem(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Recipes resource.
         * @summary Updates the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {Recipes} recipes The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRecipesItem(recipeId: string, recipes: Recipes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRecipesItem(recipeId, recipes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Recipes resource.
         * @summary Creates a Recipes resource.
         * @param {RecipesJsonld} recipesJsonld The new Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRecipesCollection(recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRecipesCollection(recipesJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Recipes resource.
         * @summary Replaces the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRecipesItem(recipeId: string, recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipesItem(recipeId, recipesJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipesApiFp(configuration)
    return {
        /**
         * Removes the Recipes resource.
         * @summary Removes the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipesItem(recipeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecipesItem(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Recipes resources.
         * @summary Retrieves the collection of Recipes resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesCollection(page?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getRecipesCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Recipes resource.
         * @summary Retrieves a Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesItem(recipeId: string, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.getRecipesItem(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Recipes resource.
         * @summary Updates the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {Recipes} recipes The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRecipesItem(recipeId: string, recipes: Recipes, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.patchRecipesItem(recipeId, recipes, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Recipes resource.
         * @summary Creates a Recipes resource.
         * @param {RecipesJsonld} recipesJsonld The new Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipesCollection(recipesJsonld: RecipesJsonld, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.postRecipesCollection(recipesJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Recipes resource.
         * @summary Replaces the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesItem(recipeId: string, recipesJsonld: RecipesJsonld, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.putRecipesItem(recipeId, recipesJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * Removes the Recipes resource.
     * @summary Removes the Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public deleteRecipesItem(recipeId: string, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).deleteRecipesItem(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Recipes resources.
     * @summary Retrieves the collection of Recipes resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipesCollection(page?: number, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getRecipesCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Recipes resource.
     * @summary Retrieves a Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipesItem(recipeId: string, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getRecipesItem(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Recipes resource.
     * @summary Updates the Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {Recipes} recipes The updated Recipes resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public patchRecipesItem(recipeId: string, recipes: Recipes, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).patchRecipesItem(recipeId, recipes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Recipes resource.
     * @summary Creates a Recipes resource.
     * @param {RecipesJsonld} recipesJsonld The new Recipes resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public postRecipesCollection(recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).postRecipesCollection(recipesJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Recipes resource.
     * @summary Replaces the Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public putRecipesItem(recipeId: string, recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).putRecipesItem(recipeId, recipesJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}
