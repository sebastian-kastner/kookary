/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Images
 */
export interface Images {
    /**
     * 
     * @type {number}
     * @memberof Images
     */
    'imageId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Images
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Images
     */
    'path'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Images
     */
    'recipe'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ImagesJsonld
 */
export interface ImagesJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof ImagesJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof ImagesJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImagesJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ImagesJsonld
     */
    'imageId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ImagesJsonld
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImagesJsonld
     */
    'path'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImagesJsonld
     */
    'recipe'?: Array<string>;
}
/**
 * Ingredients
 * @export
 * @interface Ingredients
 */
export interface Ingredients {
    /**
     * 
     * @type {number}
     * @memberof Ingredients
     */
    'ingredientId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ingredients
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Ingredients
     */
    'recipe'?: Array<string>;
}
/**
 * Ingredients
 * @export
 * @interface IngredientsJsonld
 */
export interface IngredientsJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof IngredientsJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof IngredientsJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IngredientsJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof IngredientsJsonld
     */
    'ingredientId'?: number;
    /**
     * 
     * @type {string}
     * @memberof IngredientsJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IngredientsJsonld
     */
    'recipe'?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<IngredientsJsonld>}
     * @memberof InlineResponse200
     */
    'hydra:member': Array<IngredientsJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse200
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse200
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<RecipesJsonld>}
     * @memberof InlineResponse2001
     */
    'hydra:member': Array<RecipesJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2001
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2001
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<TagsJsonld>}
     * @memberof InlineResponse2002
     */
    'hydra:member': Array<TagsJsonld>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {InlineResponse200HydraView}
     * @memberof InlineResponse2002
     */
    'hydra:view'?: InlineResponse200HydraView;
    /**
     * 
     * @type {InlineResponse200HydraSearch}
     * @memberof InlineResponse2002
     */
    'hydra:search'?: InlineResponse200HydraSearch;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydraSearch
 */
export interface InlineResponse200HydraSearch {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    'hydra:template'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearch
     */
    'hydra:variableRepresentation'?: string;
    /**
     * 
     * @type {Array<InlineResponse200HydraSearchHydraMapping>}
     * @memberof InlineResponse200HydraSearch
     */
    'hydra:mapping'?: Array<InlineResponse200HydraSearchHydraMapping>;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydraSearchHydraMapping
 */
export interface InlineResponse200HydraSearchHydraMapping {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    'variable'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    'property'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200HydraSearchHydraMapping
     */
    'required'?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydraView
 */
export interface InlineResponse200HydraView {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:first'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:last'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:previous'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydraView
     */
    'hydra:next'?: string;
}
/**
 * Recipes
 * @export
 * @interface Recipes
 */
export interface Recipes {
    /**
     * 
     * @type {number}
     * @memberof Recipes
     */
    'recipeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Recipes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Recipes
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Recipes
     */
    'servings'?: number;
    /**
     * 
     * @type {string}
     * @memberof Recipes
     */
    'source'?: string;
    /**
     * 
     * @type {number}
     * @memberof Recipes
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof Recipes
     */
    'timesCooked'?: number;
    /**
     * 
     * @type {string}
     * @memberof Recipes
     */
    'dateAdded'?: string;
    /**
     * 
     * @type {Array<Images>}
     * @memberof Recipes
     */
    'image'?: Array<Images>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Recipes
     */
    'ingredient'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Recipes
     */
    'tag'?: Array<string>;
}
/**
 * Recipes
 * @export
 * @interface RecipesJsonld
 */
export interface RecipesJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof RecipesJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof RecipesJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipesJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof RecipesJsonld
     */
    'recipeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipesJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipesJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof RecipesJsonld
     */
    'servings'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipesJsonld
     */
    'source'?: string;
    /**
     * 
     * @type {number}
     * @memberof RecipesJsonld
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof RecipesJsonld
     */
    'timesCooked'?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipesJsonld
     */
    'dateAdded'?: string;
    /**
     * 
     * @type {Array<ImagesJsonld>}
     * @memberof RecipesJsonld
     */
    'image'?: Array<ImagesJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipesJsonld
     */
    'ingredient'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipesJsonld
     */
    'tag'?: Array<string>;
}
/**
 * Tags
 * @export
 * @interface Tags
 */
export interface Tags {
    /**
     * 
     * @type {number}
     * @memberof Tags
     */
    'tagId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tags
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Tags
     */
    'recipe'?: Array<string>;
}
/**
 * Tags
 * @export
 * @interface TagsJsonld
 */
export interface TagsJsonld {
    /**
     * 
     * @type {string | any}
     * @memberof TagsJsonld
     */
    '@context'?: string | any;
    /**
     * 
     * @type {string}
     * @memberof TagsJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TagsJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof TagsJsonld
     */
    'tagId'?: number;
    /**
     * 
     * @type {string}
     * @memberof TagsJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TagsJsonld
     */
    'recipe'?: Array<string>;
}

/**
 * IngredientsApi - axios parameter creator
 * @export
 */
export const IngredientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Ingredients resource.
         * @summary Removes the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsItem: async (ingredientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('deleteIngredientsItem', 'ingredientId', ingredientId)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Ingredients resources.
         * @summary Retrieves the collection of Ingredients resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ingredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Ingredients resource.
         * @summary Retrieves a Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsItem: async (ingredientId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('getIngredientsItem', 'ingredientId', ingredientId)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Ingredients resource.
         * @summary Updates the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {Ingredients} ingredients The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIngredientsItem: async (ingredientId: string, ingredients: Ingredients, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('patchIngredientsItem', 'ingredientId', ingredientId)
            // verify required parameter 'ingredients' is not null or undefined
            assertParamExists('patchIngredientsItem', 'ingredients', ingredients)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredients, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Ingredients resource.
         * @summary Creates a Ingredients resource.
         * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientsCollection: async (ingredientsJsonld: IngredientsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientsJsonld' is not null or undefined
            assertParamExists('postIngredientsCollection', 'ingredientsJsonld', ingredientsJsonld)
            const localVarPath = `/api/ingredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Ingredients resource.
         * @summary Replaces the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientsItem: async (ingredientId: string, ingredientsJsonld: IngredientsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ingredientId' is not null or undefined
            assertParamExists('putIngredientsItem', 'ingredientId', ingredientId)
            // verify required parameter 'ingredientsJsonld' is not null or undefined
            assertParamExists('putIngredientsItem', 'ingredientsJsonld', ingredientsJsonld)
            const localVarPath = `/api/ingredients/{ingredientId}`
                .replace(`{${"ingredientId"}}`, encodeURIComponent(String(ingredientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ingredientsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IngredientsApi - functional programming interface
 * @export
 */
export const IngredientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IngredientsApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Ingredients resource.
         * @summary Removes the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredientsItem(ingredientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredientsItem(ingredientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Ingredients resources.
         * @summary Retrieves the collection of Ingredients resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Ingredients resource.
         * @summary Retrieves a Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsItem(ingredientId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsItem(ingredientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Ingredients resource.
         * @summary Updates the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {Ingredients} ingredients The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIngredientsItem(ingredientId: string, ingredients: Ingredients, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIngredientsItem(ingredientId, ingredients, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Ingredients resource.
         * @summary Creates a Ingredients resource.
         * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIngredientsCollection(ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIngredientsCollection(ingredientsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Ingredients resource.
         * @summary Replaces the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIngredientsItem(ingredientId: string, ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IngredientsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIngredientsItem(ingredientId, ingredientsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IngredientsApi - factory interface
 * @export
 */
export const IngredientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IngredientsApiFp(configuration)
    return {
        /**
         * Removes the Ingredients resource.
         * @summary Removes the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsItem(ingredientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIngredientsItem(ingredientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Ingredients resources.
         * @summary Retrieves the collection of Ingredients resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsCollection(page?: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getIngredientsCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Ingredients resource.
         * @summary Retrieves a Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsItem(ingredientId: string, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.getIngredientsItem(ingredientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Ingredients resource.
         * @summary Updates the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {Ingredients} ingredients The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIngredientsItem(ingredientId: string, ingredients: Ingredients, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.patchIngredientsItem(ingredientId, ingredients, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Ingredients resource.
         * @summary Creates a Ingredients resource.
         * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientsCollection(ingredientsJsonld: IngredientsJsonld, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.postIngredientsCollection(ingredientsJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Ingredients resource.
         * @summary Replaces the Ingredients resource.
         * @param {string} ingredientId Resource identifier
         * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientsItem(ingredientId: string, ingredientsJsonld: IngredientsJsonld, options?: any): AxiosPromise<IngredientsJsonld> {
            return localVarFp.putIngredientsItem(ingredientId, ingredientsJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IngredientsApi - object-oriented interface
 * @export
 * @class IngredientsApi
 * @extends {BaseAPI}
 */
export class IngredientsApi extends BaseAPI {
    /**
     * Removes the Ingredients resource.
     * @summary Removes the Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public deleteIngredientsItem(ingredientId: string, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).deleteIngredientsItem(ingredientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Ingredients resources.
     * @summary Retrieves the collection of Ingredients resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public getIngredientsCollection(page?: number, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).getIngredientsCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Ingredients resource.
     * @summary Retrieves a Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public getIngredientsItem(ingredientId: string, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).getIngredientsItem(ingredientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Ingredients resource.
     * @summary Updates the Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {Ingredients} ingredients The updated Ingredients resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public patchIngredientsItem(ingredientId: string, ingredients: Ingredients, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).patchIngredientsItem(ingredientId, ingredients, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Ingredients resource.
     * @summary Creates a Ingredients resource.
     * @param {IngredientsJsonld} ingredientsJsonld The new Ingredients resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public postIngredientsCollection(ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).postIngredientsCollection(ingredientsJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Ingredients resource.
     * @summary Replaces the Ingredients resource.
     * @param {string} ingredientId Resource identifier
     * @param {IngredientsJsonld} ingredientsJsonld The updated Ingredients resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IngredientsApi
     */
    public putIngredientsItem(ingredientId: string, ingredientsJsonld: IngredientsJsonld, options?: AxiosRequestConfig) {
        return IngredientsApiFp(this.configuration).putIngredientsItem(ingredientId, ingredientsJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecipesApi - axios parameter creator
 * @export
 */
export const RecipesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Recipes resource.
         * @summary Removes the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipesItem: async (recipeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('deleteRecipesItem', 'recipeId', recipeId)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Recipes resources.
         * @summary Retrieves the collection of Recipes resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Recipes resource.
         * @summary Retrieves a Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesItem: async (recipeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('getRecipesItem', 'recipeId', recipeId)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Recipes resource.
         * @summary Updates the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {Recipes} recipes The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRecipesItem: async (recipeId: string, recipes: Recipes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('patchRecipesItem', 'recipeId', recipeId)
            // verify required parameter 'recipes' is not null or undefined
            assertParamExists('patchRecipesItem', 'recipes', recipes)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Recipes resource.
         * @summary Creates a Recipes resource.
         * @param {RecipesJsonld} recipesJsonld The new Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipesCollection: async (recipesJsonld: RecipesJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipesJsonld' is not null or undefined
            assertParamExists('postRecipesCollection', 'recipesJsonld', recipesJsonld)
            const localVarPath = `/api/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipesJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Recipes resource.
         * @summary Replaces the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesItem: async (recipeId: string, recipesJsonld: RecipesJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('putRecipesItem', 'recipeId', recipeId)
            // verify required parameter 'recipesJsonld' is not null or undefined
            assertParamExists('putRecipesItem', 'recipesJsonld', recipesJsonld)
            const localVarPath = `/api/recipes/{recipeId}`
                .replace(`{${"recipeId"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipesJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipesApi - functional programming interface
 * @export
 */
export const RecipesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipesApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Recipes resource.
         * @summary Removes the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipesItem(recipeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipesItem(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Recipes resources.
         * @summary Retrieves the collection of Recipes resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Recipes resource.
         * @summary Retrieves a Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesItem(recipeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesItem(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Recipes resource.
         * @summary Updates the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {Recipes} recipes The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRecipesItem(recipeId: string, recipes: Recipes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRecipesItem(recipeId, recipes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Recipes resource.
         * @summary Creates a Recipes resource.
         * @param {RecipesJsonld} recipesJsonld The new Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRecipesCollection(recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRecipesCollection(recipesJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Recipes resource.
         * @summary Replaces the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRecipesItem(recipeId: string, recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipesJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipesItem(recipeId, recipesJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipesApi - factory interface
 * @export
 */
export const RecipesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipesApiFp(configuration)
    return {
        /**
         * Removes the Recipes resource.
         * @summary Removes the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipesItem(recipeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecipesItem(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Recipes resources.
         * @summary Retrieves the collection of Recipes resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesCollection(page?: number, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getRecipesCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Recipes resource.
         * @summary Retrieves a Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesItem(recipeId: string, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.getRecipesItem(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Recipes resource.
         * @summary Updates the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {Recipes} recipes The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRecipesItem(recipeId: string, recipes: Recipes, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.patchRecipesItem(recipeId, recipes, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Recipes resource.
         * @summary Creates a Recipes resource.
         * @param {RecipesJsonld} recipesJsonld The new Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipesCollection(recipesJsonld: RecipesJsonld, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.postRecipesCollection(recipesJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Recipes resource.
         * @summary Replaces the Recipes resource.
         * @param {string} recipeId Resource identifier
         * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesItem(recipeId: string, recipesJsonld: RecipesJsonld, options?: any): AxiosPromise<RecipesJsonld> {
            return localVarFp.putRecipesItem(recipeId, recipesJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipesApi - object-oriented interface
 * @export
 * @class RecipesApi
 * @extends {BaseAPI}
 */
export class RecipesApi extends BaseAPI {
    /**
     * Removes the Recipes resource.
     * @summary Removes the Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public deleteRecipesItem(recipeId: string, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).deleteRecipesItem(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Recipes resources.
     * @summary Retrieves the collection of Recipes resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipesCollection(page?: number, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getRecipesCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Recipes resource.
     * @summary Retrieves a Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public getRecipesItem(recipeId: string, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).getRecipesItem(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Recipes resource.
     * @summary Updates the Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {Recipes} recipes The updated Recipes resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public patchRecipesItem(recipeId: string, recipes: Recipes, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).patchRecipesItem(recipeId, recipes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Recipes resource.
     * @summary Creates a Recipes resource.
     * @param {RecipesJsonld} recipesJsonld The new Recipes resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public postRecipesCollection(recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).postRecipesCollection(recipesJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Recipes resource.
     * @summary Replaces the Recipes resource.
     * @param {string} recipeId Resource identifier
     * @param {RecipesJsonld} recipesJsonld The updated Recipes resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipesApi
     */
    public putRecipesItem(recipeId: string, recipesJsonld: RecipesJsonld, options?: AxiosRequestConfig) {
        return RecipesApiFp(this.configuration).putRecipesItem(recipeId, recipesJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Tags resource.
         * @summary Removes the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsItem: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteTagsItem', 'tagId', tagId)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Tags resources.
         * @summary Retrieves the collection of Tags resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Tags resource.
         * @summary Retrieves a Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsItem: async (tagId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getTagsItem', 'tagId', tagId)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Tags resource.
         * @summary Updates the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {Tags} tags The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTagsItem: async (tagId: string, tags: Tags, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('patchTagsItem', 'tagId', tagId)
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('patchTagsItem', 'tags', tags)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tags, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Tags resource.
         * @summary Creates a Tags resource.
         * @param {TagsJsonld} tagsJsonld The new Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTagsCollection: async (tagsJsonld: TagsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagsJsonld' is not null or undefined
            assertParamExists('postTagsCollection', 'tagsJsonld', tagsJsonld)
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Tags resource.
         * @summary Replaces the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {TagsJsonld} tagsJsonld The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsItem: async (tagId: string, tagsJsonld: TagsJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('putTagsItem', 'tagId', tagId)
            // verify required parameter 'tagsJsonld' is not null or undefined
            assertParamExists('putTagsItem', 'tagsJsonld', tagsJsonld)
            const localVarPath = `/api/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagsJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Tags resource.
         * @summary Removes the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTagsItem(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTagsItem(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Tags resources.
         * @summary Retrieves the collection of Tags resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsCollection(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Tags resource.
         * @summary Retrieves a Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsItem(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsItem(tagId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Tags resource.
         * @summary Updates the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {Tags} tags The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTagsItem(tagId: string, tags: Tags, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTagsItem(tagId, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Tags resource.
         * @summary Creates a Tags resource.
         * @param {TagsJsonld} tagsJsonld The new Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTagsCollection(tagsJsonld: TagsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTagsCollection(tagsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Tags resource.
         * @summary Replaces the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {TagsJsonld} tagsJsonld The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTagsItem(tagId: string, tagsJsonld: TagsJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTagsItem(tagId, tagsJsonld, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * Removes the Tags resource.
         * @summary Removes the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsItem(tagId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTagsItem(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Tags resources.
         * @summary Retrieves the collection of Tags resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsCollection(page?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getTagsCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Tags resource.
         * @summary Retrieves a Tags resource.
         * @param {string} tagId Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsItem(tagId: string, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.getTagsItem(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Tags resource.
         * @summary Updates the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {Tags} tags The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTagsItem(tagId: string, tags: Tags, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.patchTagsItem(tagId, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Tags resource.
         * @summary Creates a Tags resource.
         * @param {TagsJsonld} tagsJsonld The new Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTagsCollection(tagsJsonld: TagsJsonld, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.postTagsCollection(tagsJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Tags resource.
         * @summary Replaces the Tags resource.
         * @param {string} tagId Resource identifier
         * @param {TagsJsonld} tagsJsonld The updated Tags resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsItem(tagId: string, tagsJsonld: TagsJsonld, options?: any): AxiosPromise<TagsJsonld> {
            return localVarFp.putTagsItem(tagId, tagsJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * Removes the Tags resource.
     * @summary Removes the Tags resource.
     * @param {string} tagId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTagsItem(tagId: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).deleteTagsItem(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Tags resources.
     * @summary Retrieves the collection of Tags resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTagsCollection(page?: number, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTagsCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Tags resource.
     * @summary Retrieves a Tags resource.
     * @param {string} tagId Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTagsItem(tagId: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTagsItem(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Tags resource.
     * @summary Updates the Tags resource.
     * @param {string} tagId Resource identifier
     * @param {Tags} tags The updated Tags resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public patchTagsItem(tagId: string, tags: Tags, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).patchTagsItem(tagId, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Tags resource.
     * @summary Creates a Tags resource.
     * @param {TagsJsonld} tagsJsonld The new Tags resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public postTagsCollection(tagsJsonld: TagsJsonld, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).postTagsCollection(tagsJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Tags resource.
     * @summary Replaces the Tags resource.
     * @param {string} tagId Resource identifier
     * @param {TagsJsonld} tagsJsonld The updated Tags resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public putTagsItem(tagId: string, tagsJsonld: TagsJsonld, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).putTagsItem(tagId, tagsJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}


